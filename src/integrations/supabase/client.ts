// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validation to ensure environment variables are loaded
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error(
    'Missing Supabase environment variables. Please check your .env file and ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set.'
  );
}

// Helper to check if we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Custom storage implementation with safety checks
const customStorage = {
  getItem: (key: string): string | null => {
    try {
      if (isBrowser) {
        return localStorage.getItem(key);
      }
      return null;
    } catch (error) {
      console.error('Error accessing localStorage:', error);
      return null;
    }
  },
  setItem: (key: string, value: string): void => {
    try {
      if (isBrowser) {
        localStorage.setItem(key, value);
      }
    } catch (error) {
      console.error('Error writing to localStorage:', error);
    }
  },
  removeItem: (key: string): void => {
    try {
      if (isBrowser) {
        localStorage.removeItem(key);
      }
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  },
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,               // Enable session persistence
    storageKey: 'therapist-app-auth',   // Unique storage key for the app
    autoRefreshToken: true,             // Automatically refresh token
    detectSessionInUrl: true,           // Detect OAuth session in URL
    storage: customStorage,
  },
});

// Function to clear auth state - useful for debugging
export const clearAuthState = () => {
  try {
    if (isBrowser) {
      // Clear Supabase auth storage
      localStorage.removeItem('therapist-app-auth');
      
      // Clear custom user type storage
      localStorage.removeItem('nokutoru_user_type');
      
      // Clear any admin session data
      localStorage.removeItem('admin_session');
      localStorage.removeItem('admin_user_id');
      
      // Clear any potential session data with different keys
      Object.keys(localStorage).forEach(key => {
        if (key.includes('supabase') || key.includes('auth') || key.includes('sb-')) {
          localStorage.removeItem(key);
        }
      });
      
      console.log('Auth state completely cleared');
    }
  } catch (error) {
    console.error('Error clearing auth state:', error);
  }
};

// Force sign out and clear all auth state - use this for troubleshooting auth issues
export const forceSignOut = async () => {
  try {
    // First attempt normal sign out
    await supabase.auth.signOut();
    
    // Then clear all storage
    clearAuthState();
    
    // Force reload the page
    if (isBrowser) {
      window.location.href = '/';
    }
    
    return { success: true };
  } catch (error) {
    console.error('Force sign out failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
};
