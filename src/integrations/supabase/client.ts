// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { getConfig } from '../../lib/config';

// Helper to check if we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Custom storage implementation with safety checks
const customStorage = {
  getItem: (key: string): string | null => {
    try {
      if (isBrowser) {
        return localStorage.getItem(key);
      }
      return null;
    } catch (error) {
      console.error('Error accessing localStorage:', error);
      return null;
    }
  },
  setItem: (key: string, value: string): void => {
    try {
      if (isBrowser) {
        localStorage.setItem(key, value);
      }
    } catch (error) {
      console.error('Error writing to localStorage:', error);
    }
  },
  removeItem: (key: string): void => {
    try {
      if (isBrowser) {
        localStorage.removeItem(key);
      }
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  },
};

// Actual Supabase client instance
let supabaseClient: any = null;
let isInitializing = false;

// Initialize client synchronously
function getSupabaseClient() {
  if (supabaseClient) {
    return supabaseClient;
  }
  
  if (!isInitializing) {
    isInitializing = true;
    
    // Start initialization in background
    initializeClientAsync().then(client => {
      supabaseClient = client;
      isInitializing = false;
    }).catch(error => {
      console.error('Failed to initialize Supabase client:', error);
      isInitializing = false;
    });
  }
  
  // Return a temporary client that will be replaced once initialization is complete
  return createTemporaryClient();
}

// Function to create a temporary client that logs errors but doesn't break the app
function createTemporaryClient() {
  // Create a proxy that logs errors for all operations until the real client is ready
  return new Proxy({}, {
    get(target, prop) {
      // For most properties, return a function that logs but doesn't break
      if (prop === 'auth') {
        return createAuthProxy();
      } else if (prop === 'from') {
        return function() {
          return createQueryProxy();
        };
      } else {
        return function() {
          console.log(`Supabase client not ready yet, operation '${String(prop)}' queued`);
          return Promise.resolve({ data: null, error: new Error('Client not initialized') });
        };
      }
    }
  });
}

// Special proxy for auth operations
function createAuthProxy() {
  return new Proxy({}, {
    get(target, prop) {
      if (prop === 'onAuthStateChange') {
        // Special case for auth.onAuthStateChange
        return function() {
          console.log('Auth state change listener registered, will be active when client is ready');
          // Return an object with a subscription that can be unsubscribed
          return {
            data: {
              subscription: {
                unsubscribe: () => {}
              }
            }
          };
        };
      } else {
        return function() {
          console.log(`Supabase auth not ready yet, operation '${String(prop)}' queued`);
          return Promise.resolve({ data: { session: null, user: null }, error: null });
        };
      }
    }
  });
}

// Special proxy for query operations
function createQueryProxy() {
  return new Proxy({}, {
    get(target, prop) {
      return function() {
        console.log(`Supabase query not ready yet, operation '${String(prop)}' queued`);
        return createQueryProxy(); // Return another proxy for chaining
      };
    }
  });
}

// Initialize client asynchronously
async function initializeClientAsync() {
  try {
    const config = await getConfig();
    const SUPABASE_URL = config.VITE_SUPABASE_URL;
    const SUPABASE_PUBLISHABLE_KEY = config.VITE_SUPABASE_ANON_KEY;

    // Validation to ensure environment variables are loaded
    if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
      throw new Error(
        'Missing Supabase environment variables. Please check your .env file and ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set.'
      );
    }

    return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: true,               // Enable session persistence
        storageKey: 'therapist-app-auth',   // Unique storage key for the app
        autoRefreshToken: true,             // Automatically refresh token
        detectSessionInUrl: true,           // Detect OAuth session in URL
        storage: customStorage,
      },
    });
  } catch (error) {
    console.error('Failed to initialize Supabase client:', error);
    throw error;
  }
}

// Export the client directly - it will initialize lazily
export const supabase = getSupabaseClient();

// Function to clear auth state - useful for debugging
export const clearAuthState = () => {
  try {
    if (isBrowser) {
      // Clear Supabase auth storage
      localStorage.removeItem('therapist-app-auth');
      
      // Clear custom user type storage
      localStorage.removeItem('nokutoru_user_type');
      
      // Clear any admin session data
      localStorage.removeItem('admin_session');
      localStorage.removeItem('admin_user_id');
      
      // Clear any potential session data with different keys
      Object.keys(localStorage).forEach(key => {
        if (key.includes('supabase') || key.includes('auth') || key.includes('sb-')) {
          localStorage.removeItem(key);
        }
      });
      
      console.log('Auth state completely cleared');
    }
  } catch (error) {
    console.error('Error clearing auth state:', error);
  }
};

// Force sign out and clear all auth state - use this for troubleshooting auth issues
export const forceSignOut = async () => {
  try {
    // First attempt normal sign out
    if (supabaseClient) {
      await supabaseClient.auth.signOut();
    }
    
    // Then clear all storage
    clearAuthState();
    
    // Force reload the page
    if (isBrowser) {
      window.location.href = '/';
    }
    
    return { success: true };
  } catch (error) {
    console.error('Force sign out failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
};
