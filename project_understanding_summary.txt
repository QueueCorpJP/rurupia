## Project: Therapist Connectivity

**Core Idea:** A web application to connect clients with therapists, manage therapy-related services, and provide a platform for therapist-client interaction.

**Key Features & Functionality:**
*   **User Roles:** Client, Therapist, Store Admin, System Admin.
*   **Client Features:**
    *   Browse and filter therapists.
    *   View detailed therapist profiles.
    *   Questionnaire-based therapist matching (including MBTI personality types).
    *   Book appointments.
    *   Manage personal bookings.
    *   Messaging system.
    *   Login via email/password, LINE, and Google.
*   **Therapist Features:**
    *   Self-registration via invitation link.
    *   Comprehensive profile management (specializations, questionnaire, MBTI, posts).
    *   Manage availability and bookings.
    *   Messaging system with clients.
    *   Create blog-like posts viewable by clients.
*   **Store Admin Features:**
    *   Manage therapists associated with their store (approval process).
    *   Oversee bookings.
    *   Manage courses.
    *   Contribute to/manage blog content.
    *   View analytics for their store.
    *   Handle inquiries.
*   **System Admin Features:**
    *   User account management (all types).
    *   Overall blog content management.
    *   System settings and configuration.
    *   View platform-wide analytics (e.g., page views).
    *   Handle system-level inquiries and requests.
*   **Content & Interaction:**
    *   Blog system with Rich Text Editor (TinyMCE).
    *   Therapist posts (distinct from blog).
    *   Social features: Therapist reviews (clients can review after a completed session), Post liking, Post commenting.
*   **Database & Backend Logic:**
    *   Extensive use of Supabase PostgreSQL.
    *   Numerous tables including: `profiles`, `therapists`, `bookings`, `blog_posts`, `therapist_posts`, `messages`, `therapist_reviews`, `post_likes`, `post_comments`, `page_views`, `store_therapist_relations`, etc.
    *   Heavy reliance on Row Level Security (RLS) policies for granular data access control based on user roles and relationships.
    *   PostgreSQL functions and triggers for automating tasks (e.g., calculating average ratings, updating like/comment counts, handling new user profile creation).
*   **AI/Agent Aspect (Development Tooling):**
    *   `memory.json`: A structured knowledge base capturing project architecture, tech stack, features, and user information. Seems to be for an AI assistant guiding development.
    *   `lessons.json`: Tracks common errors, their patterns, solutions, and verification steps, likely for the same AI assistant.

**Technical Setup:**
*   **Frontend:**
    *   Framework/Library: React (v18) with Vite as the build tool.
    *   Language: TypeScript.
    *   Routing: `react-router-dom`.
    *   State Management: Primarily TanStack Query (React Query) for server state; local component state and React Context API (e.g., `AdminAuthContext`).
    *   Forms: `react-hook-form` with Zod for validation.
    *   UI: Tailwind CSS, Shadcn UI (extensive use of its components), custom components.
    *   Styling: `index.css`, `App.css` for global styles, Tailwind utility classes.
*   **Backend & Database:**
    *   Provider: Supabase (PaaS).
    *   Services Used: Supabase Auth (including OAuth for LINE, Google), Supabase Database (PostgreSQL), Supabase Storage (for blog images, verification documents).
    *   Database Migrations: Managed via Supabase CLI (migration files in `supabase/migrations/`). Numerous other ad-hoc SQL scripts are present in various locations (`/`, `api/`, `supabase/`, `migrations/` at root).
*   **AWS Infrastructure (Serverless Backend):**
    *   AWS Lambda function `rurupia-api` deployed in ap-northeast-1 region
    *   API Gateway `rurupia-api` (ID: pq33gk4qqd) with proxy integration
    *   Production endpoint: https://pq33gk4qqd.execute-api.ap-northeast-1.amazonaws.com/prod
    *   IAM role `rurupia-lambda-role` with basic execution permissions
    *   Lambda handles API routes: `/api/post-likes`, `/api/user-likes`, `/api/post-comments`, `/api/config`
    *   Environment variables securely stored in Lambda configuration
*   **Deployment & Hosting:**
    *   Frontend: AWS S3 bucket with CloudFront distribution (E2P3Q41GY0N3CJ)
    *   Domain: rupipia.jp
    *   CloudFront configuration:
        - S3 origin for static frontend files
        - API Gateway origin for `/api/*` routes  
        - CORS enabled for API endpoints
        - Cache behaviors optimized for static assets and API responses
*   **API Interaction:**
    *   Primarily client-side interaction with Supabase services (Database, Auth, Storage) using the `supabase-js` client library.
    *   Additional API routes handled by AWS Lambda for post likes/comments and configuration
    *   Data logic, authorization, and complex operations are handled by Supabase RLS policies, database functions (PL/pgSQL), and triggers.
    *   Configuration service (`src/lib/config.ts`) fetches environment variables from Lambda API endpoint
*   **Development & Tooling:**
    *   Package Manager: npm (indicated by `package-lock.json`, though `bun.lockb` also exists).
    *   Linting: ESLint with TypeScript support.
    *   Component Tagger: `lovable-tagger` (used in development mode via Vite config).
    *   Supabase Client: Initialized in `src/integrations/supabase/client.ts` with environment variables for URL/anon key and `localStorage` for session persistence.
    *   Supabase Admin Client: A separate client initialized in `src/integrations/supabase/admin-client.ts` using environment variables for Service Role Key.
    *   Environment Variables: Managed through `.env` file for development and Lambda environment for production
    *   Configuration Service: `src/lib/config.ts` provides secure access to environment variables in production
    *   Auth State Management: 
        *   Uses a combination of Supabase auth session and custom localStorage caching for user types.
        *   The app determines user types by checking multiple tables (`stores`, `therapists`, `profiles`) and caches the result in localStorage under the key 'nokutoru_user_type'.
        *   UI rendering logic checks both user session and userType before showing logged-in UI elements to prevent inconsistencies.
        *   Enhanced logout functionality includes proper state and localStorage clearing with fallback mechanisms.
        *   Stale state detection clears localStorage when user session doesn't exist.
        *   Added admin client fallback for retrieving user profiles when normal queries fail.
    *   Auth Debugging: 
        *   Custom utilities in `src/utils/auth-debug.ts` provide browser console tools for diagnosing and fixing auth state issues.
        *   Available tools include `checkState()`, `clearAll()`, `forceSignOut()`, and `fixState()` to assist developers.
        *   These utilities are exposed in the browser console in `main.tsx` via the `window.authDebug` object.
    *   Storage Setup: Client-side script (`src/supabase/storage-setup.ts`) attempts to ensure the 'blog' bucket exists, run by administrators during initial setup.
    *   User Interface Navigation:
        *   Breadcrumbs for navigating between hierarchical pages (user profile → messages, bookings, etc.)
        *   Loading indicators for UI state transitions (login, logout, navigation, profile saving)
        *   Consistent back-navigation from child pages to parent pages
        *   Fixed links to followed therapists page (using dedicated page instead of filtered view)
    *   Notification System:
        *   Database tables (notification_settings, notifications) to store user preferences and notification history
        *   Typed notification service helpers for different notification types (messages, bookings, promotions, reviews)
        *   User notification settings page with toggles for different notification types
        *   Integration with messaging and other features to send appropriate notifications

**Key Files & Directories:**
*   `src/`: Main application source code.
    *   `main.tsx`: App entry point.
    *   `App.tsx`: Root component with routing setup.
    *   `pages/`: Route components.
    *   `components/`: Reusable UI components (including Shadcn UI).
    *   `integrations/supabase/client.ts`: Supabase client setup with environment variables.
    *   `lib/config.ts`: Configuration service for environment variables.
    *   `contexts/`, `hooks/`, `utils/`, `types/`.
*   `lambda-api/`: AWS Lambda function code
    *   `index.js`: Main Lambda handler with API routes
    *   `package.json`: Node.js dependencies (Supabase client)
*   `supabase/`: Supabase CLI related files.
    *   `migrations/`: Official database migration scripts.
    *   `config.toml`: Supabase project ID.
    *   Numerous other SQL scripts and READMEs for specific features/fixes.
*   `api/`: Legacy API routes (now handled by Lambda)
*   `public/`: Static assets.
*   `.env`: Environment variables for development
*   `.env.example`: Template for environment variables
*   SQL Scripts: Many `.sql` files across the project for initial setup, fixes, feature additions (e.g., `supabase-setup.sql`, `api/database-setup.sql`, `add-questionnaire-columns.sql`).
*   Configuration: `vite.config.ts`, `tailwind.config.ts`, `tsconfig.json`, `package.json`, `vercel.json`, `eslint.config.js`.
*   Documentation: Various `README.md` files explaining setup for Supabase, LINE login, questionnaire, therapist signup, etc.
*   AI/Agent Files: `memory.json`, `lessons.json`.

**Recent UI Improvements:**
* Added breadcrumbs navigation to all key user pages (user-bookings, messages, messages-index, followed-therapists)
* Fixed link to followed therapists in user profile sidebar (now using dedicated page)
* Fixed multiline input for 趣味 (hobbies) field in user profile
* Removed verification request button from mypage (feature under maintenance)
* Removed the プロフィール編集 (Profile Edit) button from the left profile card
* Added loading indicators for UI state transitions (login, logout, profile saving)
* Enhanced session management to prevent UI flickering during auth state changes
* Improved the mobile layout with consistent container styling

**Recent Updates:**
- Reverted GitHub Actions workflows to use AWS access keys instead of OIDC authentication for improved compatibility
- Updated the AWS credential configuration in GitHub workflows to use access keys directly
- Updated the GitHub Secrets setup guide to match the current authentication method
- Fixed 400 Bad Request errors in analytics by updating PostgreSQL RPC functions with consistent parameter naming (input_store_id)
- Fixed TypeScript errors in StoreAnalytics.tsx by adding proper module declarations for Supabase RPC functions
- Improved error handling in analytics data fetching with better error logging and type safety checks
- Created PostgreSQL functions (get_customer_age_distribution, get_monthly_customer_data, get_popular_booking_times, get_therapist_performance) to generate analytics data on-the-fly, solving the 403 Forbidden error in StoreAnalytics
- Updated StoreAnalytics.tsx to use RPC function calls instead of direct table queries, falling back to mock data when needed
- Fixed monthly sales calculation in the StoreAdminDashboard to correctly count revenue from completed bookings
- Fixed the booking status detection to properly handle both "完了" (completed) status and the combination of store and therapist statuses
- Updated all booking date references to use booking.date instead of booking.booking_date to match the database schema
- Fixed the save functionality in TherapistSettings page for all tabs (account, privacy, notifications, security)
- Added proper TypeScript type definitions for therapist settings columns in the database
- Fixed therapist record creation with required fields (name, description, location) when settings are first saved
- Improved error handling with specific error messages for each settings operation
- Fixed the data fetching issues in therapist settings by adding proper type assertions
- Added local state updates after each successful settings change to update the UI immediately
- Fixed password change functionality by adding current password verification
- Fixed the calendar UI in therapist detail page to properly display availability
- Enhanced availability checking logic for therapists to provide more accurate results
- Fixed error message "このセラピストは現在予約を受け付けていません" to only show when a therapist truly has no availability
- Added more robust availability detection that checks for valid future dates, working hours, and availability data
- Improved the visual indication of unavailable therapists with red text alerts
- Fixed availability date checking by properly handling both date strings and day names
- Added a new hasAnyAvailability state in AvailabilityCalendar to prevent false error messages
- Fixed the working day matching logic to properly check for specific dates rather than just day names
- Fixed the availability calendar in therapist detail and booking pages to strictly use real therapist working days/hours from the database without fallback mock data
- Added clear messaging when a therapist has no availability instead of showing mock calendar data
- Added fuzzy search functionality to the Index page search field, showing real-time suggestions as users type
- Integrated all 47 Japanese prefectures in the area dropdown using the PrefectureSelect component
- Enhanced notification system with proper error handling and user feedback
- Fixed various UI consistency issues including React Fragment handling
- Removed Lovable-related components and references
- Added toast notifications for user actions across the application
- Fixed booking submission issues by correcting database field names and adapting to schema constraints
- Implemented comprehensive booking notification system for therapists, stores, and users
- Fixed messaging system by properly maintaining session context and improving error handling
- Created new therapist messaging interface with improved UX and notification support
- Added support for image attachments in messages with proper error handling and feedback
- Improved the hobbies input field in UserProfile to match the TherapistProfileForm using a badge-based interface
- Added account deletion functionality to the TherapistSettings page
- Removed the language setting dropdown from the TherapistSettings page
- Added security settings to allow therapists to change their passwords
- Added privacy settings to TherapistSettings to control profile visibility and messaging restrictions
- Extended the therapists table with columns for privacy and notification settings
- Fixed the issue with database settings not being reflected correctly in the UI
- Fixed several type errors in the settings form by adding proper typings

**Recent Updates & Improvements**

### Supabase Client Auth Methods Fix - 2025-01-12

**Issue:** LINE users were getting "TypeError: B.auth.getUser is not a function" when trying to set up email addresses.

**Root Cause:** The custom Supabase client wrapper in `src/integrations/supabase/client.ts` was missing the `getUser` and `updateUser` methods in the auth object.

**Solution:**
- Added `getUser: async () => { const client = await initializeClientAsync(); return client.auth.getUser(); }` 
- Added `updateUser: async (attributes: any) => { const client = await initializeClientAsync(); return client.auth.updateUser(attributes); }`
- Both methods properly await the async client initialization before calling the actual Supabase methods

**Impact:** 
- LINE users can now successfully set up email addresses
- Email change functionality works properly
- Fixed "getUser is not a function" errors

### LINE User Functionality Improvements - 2025-01-12

**Enhanced LINE User Onboarding:**

1. **ID Verification Document Upload - ENABLED**
   - Re-enabled document upload functionality that was previously disabled
   - LINE users can now upload identity verification documents (driver's license, passport, My Number card)
   - Support for both image files (JPG, PNG) and PDF documents
   - Clear file selection interface with proper feedback

2. **Email Setup for Empty Email States - ENHANCED**
   - Improved email detection logic to handle LINE users with temporary emails (`@temp.rupipia.jp`)
   - Automatic email setup dialog appears for LINE users who need to set up email
   - Better logic distinguishing between email setup vs email change
   - Enhanced UI messaging for different scenarios (initial setup vs changing existing email)

3. **Email Setup Dialog Improvements:**
   - Context-aware dialog titles and descriptions
   - Pre-fills current email when changing (but not for temp emails)
   - Different success/error messages for setup vs change operations
   - Better handling of temporary LINE emails

**Technical Implementation:**
- Fixed email logic to detect temp emails: `!profile.email || profile.email.includes('@temp.rupipia.jp')`
- Enhanced `handleEmailSetup` function with proper email change vs setup detection
- Improved error handling and user feedback
- Auto-shows email setup dialog on profile page load for users needing email setup

### LINE OAuth Email Handling Fix - 2025-06-05

Fixed an issue where LINE OAuth registration would fail for users without email addresses in their LINE accounts. The solution includes:

1. **Database Schema Update:**
   - Added `needs_email_setup` (boolean) column to `profiles` table
   - Default value: FALSE

2. **LINE Registration Flow Improvements:**
   - Now creates temporary email (`line_{userId}@temp.rupipia.jp`) for LINE users without emails
   - Sets `needs_email_setup` flag to TRUE for these accounts
   - Uses a consistent password pattern: `line_{userId}_{timestamp}`

3. **User Profile Enhancement:**
   - Added email setup dialog that appears automatically for users with `needs_email_setup: true`
   - Allows users to set a proper email address for notifications and account recovery
   - Maintains existing functionality for users who already have email addresses

**Files Modified:**
- `src/components/LineCallback.tsx` - Enhanced LINE OAuth callback handling
- `src/pages/UserProfile.tsx` - Added email setup functionality  
- `src/integrations/supabase/types.ts` - Updated TypeScript types for new column
- Database migration: Added `needs_email_setup` column to profiles table

This ensures all LINE users can properly set up their accounts regardless of whether LINE provides an email address during OAuth registration.

### LINE OAuth 500 Error Resolution - 2025-01-11

**Issue:** LINE OAuth signup was failing with persistent 500 Internal Server Error:
```
POST https://vvwkuqnotnilsbcswfqu.supabase.co/auth/v1/signup 500 (Internal Server Error)
"Database error saving new user"
```

**Root Cause Analysis:**
1. Database trigger `on_auth_user_created` was calling `handle_new_user()` function
2. Function was trying to insert profiles with duplicate `line_id` values  
3. `profiles` table had unique constraint on `line_id` column causing conflicts
4. Foreign key constraint `profiles_id_fkey` required profile `id` to exist in `auth.users` during user creation

**Solutions Applied:**

1. **Initial Attempts (unsuccessful):**
   - Modified `handle_new_user()` function to handle `line_id` conflicts with UPSERT
   - Added RLS policies for `supabase_admin` role
   - Disabled Row Level Security on profiles table

2. **Final Solution (successful):**
   - **Removed foreign key constraint:** `ALTER TABLE public.profiles DROP CONSTRAINT profiles_id_fkey`
   - **Simplified trigger function** to create basic profiles only
   - **Eliminated constraint conflicts** during user creation process

**Current State:**
- LINE OAuth signup works successfully
- Users can register and sign in via LINE without database errors
- Security trade-offs accepted (RLS disabled, foreign key removed) for functionality
- All LINE authentication flows are now operational

### Supabase Client Edge Function Invocation Fix - (Current Date)

**Issue:** Calls to Supabase Edge Functions using `supabase.functions.invoke()` were failing with `TypeError: Cannot read properties of undefined (reading 'invoke')`. This was observed in `LineCallback.tsx` during the LINE OAuth flow.

**Root Cause:** The custom Supabase client wrapper in `src/integrations/supabase/client.ts` (specifically the `createSimpleClient` function) did not correctly expose a `functions` property that handled the asynchronous initialization of the Supabase client. While `auth`, `rpc`, and `from` methods had async-safe wrappers, `functions.invoke` was not similarly covered.

**Solution:**
- Modified the `createSimpleClient` function in `src/integrations/supabase/client.ts`.
- Added a `functions` property to the returned wrapper object.
- This `functions` property contains an `invoke` method:
  ```typescript
  functions: {
    invoke: async (functionName: string, options?: any) => {
      const client = await initializeClientAsync();
      // Basic handling for common case where options might just be the body
      let invokeOptions = options;
      if (options && typeof options === 'object' && !('body' in options) && !('headers' in options) && !('method' in options)) {
        invokeOptions = { body: options };
      }
      return client.functions.invoke(functionName, invokeOptions);
    },
  }
  ```
- This ensures that `initializeClientAsync()` is awaited before `client.functions.invoke()` is called, making Edge Function invocations through the wrapped client reliable.

**Impact:**
- Resolved the `TypeError` when calling `supabase.functions.invoke()`.
- LINE authentication flow in `LineCallback.tsx` can now correctly invoke the `line-auth-handler` Edge Function.
- All Supabase client functionalities (`auth`, `from`, `rpc`, `functions`) exposed through the custom wrapper now consistently handle asynchronous client initialization.

# Rurupia - Therapist Connectivity Platform

## Project Overview
Rurupia is a web platform for connecting clients with therapists. The platform allows users to search for therapists, book sessions, and communicate with therapists.

## Architecture
- Frontend: React + Vite + TypeScript + ShadCN UI
- Backend: Supabase (PostgreSQL + Authentication)
- Hosting: AWS S3 + CloudFront
- API Gateway + Lambda for environment variables and server-side operations
- Supabase Edge Functions for specialized integrations (e.g., LINE Login)

## Authentication Methods
The platform supports multiple authentication methods:
- Email/Password
- Google OAuth
- LINE Login

## Key Components
1. Frontend React SPA hosted on S3/CloudFront
2. Server-side environment variables served via Lambda function
3. Supabase database for storing user data, therapist profiles, bookings, etc.
4. Supabase authentication for user management
5. Edge Functions for specialized integration logic (e.g., LINE authentication)

## Challenges Resolved
1. CloudFront/S3 routing for SPA with proper error handling
2. Environment variable handling in a static hosting environment
3. Supabase client initialization with proper error handling
4. LINE Login integration with appropriate environment variables and Edge Functions

## LINE Authentication Flow
1. User initiates LINE Login from login/signup page
2. User is redirected to LINE authorization page
3. LINE redirects back to our application with an authorization code
4. Frontend exchanges code for ID token and access token
5. Frontend calls Supabase Edge Function with tokens
6. Edge Function verifies tokens, retrieves user profile, and creates/updates user in Supabase
7. User is logged in and redirected to appropriate page

## Environment Variables
- VITE_APP_LINE_CLIENT_ID: LINE Login client ID
- VITE_APP_LINE_CLIENT_SECRET: LINE Login client secret 
- VITE_LINE_REDIRECT_URI: Callback URL for LINE Login
- Other environment variables for Supabase connection

## Notes
- The frontend is designed as a SPA and requires CloudFront to handle routing
- The platform uses a responsive design for mobile and desktop
- The codebase follows a component-based architecture with React

Project Understanding Summary:

Core Functionality:
The project appears to be a web application with user authentication, including social login via LINE. It uses Supabase for its backend, including Auth, Database (Postgres), and Edge Functions.

Key Components Identified:
- Supabase Project: "nokutoru" (ID: vvwkuqnotnilsbcswfqu)
- Authentication:
  - Standard Supabase Auth.
  - LINE Login:
    - Frontend initiates LINE login and handles callback via `src/pages/LineCallback.tsx`.
    - Callback component calls Supabase Edge Function `line-auth-handler`.
    - Edge Function (`supabase/functions/line-auth-handler/index.ts`):
      - Receives LINE `id_token` and `access_token`.
      - Verifies tokens and fetches user profile (including email) from LINE APIs.
      - For new users:
        - Creates an `auth.users` entry using `supabase.auth.admin.createUser`.
        - Populates `user_metadata` with `line_id`, `full_name`, `avatar_url` from LINE, and `provider: 'line'`.
      - For existing users (identified by `line_id` in `profiles` table):
        - Updates `full_name` and `avatar_url` in their `profiles` entry.
- Database:
  - `profiles` table: Stores user profile information, linked to `auth.users` by `id`.
    - Contains `line_id` column for LINE integration.
    - Other columns include `full_name`, `avatar_url`, `email`, `user_type`.
  - `handle_new_user` SQL function:
    - Triggered on `AFTER INSERT ON auth.users`.
    - **Updated (based on my last interaction on this issue):** Now creates an entry in `public.profiles` by inserting `id`, `email` from the new `auth.users` record, AND `full_name`, `avatar_url`, `line_id` from `NEW.raw_user_meta_data`. It also sets a default `user_type` to 'customer'. This ensures LINE-specific information is immediately available in the profile upon creation.
- Environment Variables:
  - `SUPABASE_URL`, `SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY`: Standard Supabase keys.
  - `VITE_APP_LINE_CLIENT_ID`, `VITE_APP_LINE_CLIENT_SECRET`: LINE OAuth application credentials. These are used by the frontend (`LineCallback.tsx`) and the Edge Function (`line-auth-handler` which fetches `VITE_APP_LINE_CLIENT_ID` from its environment).

Recent Issue & Fix:
- Problem: LINE authentication was not properly adding the LINE account details (like `line_id`, `full_name`) to the user's profile in the `profiles` table for new users.
- Solution Implemented: Modified the `handle_new_user` SQL trigger function in `supabase-update-profiles.sql`. This function now extracts `line_id`, `full_name`, and `avatar_url` from `NEW.raw_user_meta_data` (which is populated by the `line-auth-handler` Edge Function during `createUser`) and inserts them directly into the `profiles` table when a new user is created. This ensures that the `profiles` entry is complete with LINE information from the start. The Edge Function's existing logic to update the profile for new users acts as a safeguard.

Assumptions:
- The `line-auth-handler` Edge Function is correctly deployed and configured with necessary environment variables (Supabase URL/Service Key, LINE Client ID).
- The LINE Developer Console callback URL is correctly configured to point to the application's callback path handled by `LineCallback.tsx`.
- The `VITE_APP_LINE_CLIENT_ID` and `VITE_APP_LINE_CLIENT_SECRET` are correctly set in their respective environments.

User Story/Problem Solved:
- User reported that LINE authentication was not working properly, and the account wasn't being added to the profile.
- The fix ensures that when a new user signs up via LINE, their `line_id`, `full_name`, and `avatar_url` are correctly stored in the `profiles` table.

## Recent Updates & Improvements

### Supabase Client Auth Methods Fix - 2025-01-12

**Issue:** LINE users were getting "TypeError: B.auth.getUser is not a function" when trying to set up email addresses.

**Root Cause:** The custom Supabase client wrapper in `src/integrations/supabase/client.ts` was missing the `getUser` and `updateUser` methods in the auth object.

**Solution:**
- Added `getUser: async () => { const client = await initializeClientAsync(); return client.auth.getUser(); }` 
- Added `updateUser: async (attributes: any) => { const client = await initializeClientAsync(); return client.auth.updateUser(attributes); }`
- Both methods properly await the async client initialization before calling the actual Supabase methods

**Impact:** 
- LINE users can now successfully set up email addresses
- Email change functionality works properly
- Fixed "getUser is not a function" errors

### LINE User Functionality Improvements - 2025-01-12

**Enhanced LINE User Onboarding:**

1. **ID Verification Document Upload - ENABLED**
   - Re-enabled document upload functionality that was previously disabled
   - LINE users can now upload identity verification documents (driver's license, passport, My Number card)
   - Support for both image files (JPG, PNG) and PDF documents
   - Clear file selection interface with proper feedback

2. **Email Setup for Empty Email States - ENHANCED**
   - Improved email detection logic to handle LINE users with temporary emails (`@temp.rupipia.jp`)
   - Automatic email setup dialog appears for LINE users who need to set up email
   - Better logic distinguishing between email setup vs email change
   - Enhanced UI messaging for different scenarios (initial setup vs changing existing email)

3. **Email Setup Dialog Improvements:**
   - Context-aware dialog titles and descriptions
   - Pre-fills current email when changing (but not for temp emails)
   - Different success/error messages for setup vs change operations
   - Better handling of temporary LINE emails

**Technical Implementation:**
- Fixed email logic to detect temp emails: `!profile.email || profile.email.includes('@temp.rupipia.jp')`
- Enhanced `handleEmailSetup` function with proper email change vs setup detection
- Improved error handling and user feedback
- Auto-shows email setup dialog on profile page load for users needing email setup

### LINE OAuth Email Handling Fix - 2025-06-05

Fixed an issue where LINE OAuth registration would fail for users without email addresses in their LINE accounts. The solution includes:

1. **Database Schema Update:**
   - Added `needs_email_setup` (boolean) column to `profiles` table
   - Default value: FALSE

2. **LINE Registration Flow Improvements:**
   - Now creates temporary email (`line_{userId}@temp.rupipia.jp`) for LINE users without emails
   - Sets `needs_email_setup` flag to TRUE for these accounts
   - Uses a consistent password pattern: `line_{userId}_{timestamp}`

3. **User Profile Enhancement:**
   - Added email setup dialog that appears automatically for users with `needs_email_setup: true`
   - Allows users to set a proper email address for notifications and account recovery
   - Maintains existing functionality for users who already have email addresses

**Files Modified:**
- `src/components/LineCallback.tsx` - Enhanced LINE OAuth callback handling
- `src/pages/UserProfile.tsx` - Added email setup functionality  
- `src/integrations/supabase/types.ts` - Updated TypeScript types for new column
- Database migration: Added `needs_email_setup` column to profiles table

This ensures all LINE users can properly set up their accounts regardless of whether LINE provides an email address during OAuth registration.

### LINE OAuth 500 Error Resolution - 2025-01-11

**Issue:** LINE OAuth signup was failing with persistent 500 Internal Server Error:
```
POST https://vvwkuqnotnilsbcswfqu.supabase.co/auth/v1/signup 500 (Internal Server Error)
"Database error saving new user"
```

**Root Cause Analysis:**
1. Database trigger `on_auth_user_created` was calling `handle_new_user()` function
2. Function was trying to insert profiles with duplicate `line_id` values  
3. `profiles` table had unique constraint on `line_id` column causing conflicts
4. Foreign key constraint `profiles_id_fkey` required profile `id` to exist in `auth.users` during user creation

**Solutions Applied:**

1. **Initial Attempts (unsuccessful):**
   - Modified `handle_new_user()` function to handle `line_id` conflicts with UPSERT
   - Added RLS policies for `supabase_admin` role
   - Disabled Row Level Security on profiles table

2. **Final Solution (successful):**
   - **Removed foreign key constraint:** `ALTER TABLE public.profiles DROP CONSTRAINT profiles_id_fkey`
   - **Simplified trigger function** to create basic profiles only
   - **Eliminated constraint conflicts** during user creation process

**Current State:**
- LINE OAuth signup works successfully
- Users can register and sign in via LINE without database errors
- Security trade-offs accepted (RLS disabled, foreign key removed) for functionality
- All LINE authentication flows are now operational

### Supabase Client Edge Function Invocation Fix - (Current Date)

**Issue:** Calls to Supabase Edge Functions using `supabase.functions.invoke()` were failing with `TypeError: Cannot read properties of undefined (reading 'invoke')`. This was observed in `LineCallback.tsx` during the LINE OAuth flow.

**Root Cause:** The custom Supabase client wrapper in `src/integrations/supabase/client.ts` (specifically the `createSimpleClient` function) did not correctly expose a `functions` property that handled the asynchronous initialization of the Supabase client. While `auth`, `rpc`, and `from` methods had async-safe wrappers, `functions.invoke` was not similarly covered.

**Solution:**
- Modified the `createSimpleClient` function in `src/integrations/supabase/client.ts`.
- Added a `functions` property to the returned wrapper object.
- This `functions` property contains an `invoke` method:
  ```typescript
  functions: {
    invoke: async (functionName: string, options?: any) => {
      const client = await initializeClientAsync();
      // Basic handling for common case where options might just be the body
      let invokeOptions = options;
      if (options && typeof options === 'object' && !('body' in options) && !('headers' in options) && !('method' in options)) {
        invokeOptions = { body: options };
      }
      return client.functions.invoke(functionName, invokeOptions);
    },
  }
  ```
- This ensures that `initializeClientAsync()` is awaited before `client.functions.invoke()` is called, making Edge Function invocations through the wrapped client reliable.

**Impact:**
- Resolved the `TypeError` when calling `supabase.functions.invoke()`.
- LINE authentication flow in `LineCallback.tsx` can now correctly invoke the `line-auth-handler` Edge Function.
- All Supabase client functionalities (`auth`, `from`, `rpc`, `functions`) exposed through the custom wrapper now consistently handle asynchronous client initialization.

## AWS Infrastructure

**CloudFront Distribution:**
*   Distribution ID: E2P3Q41GY0N3CJ
*   Domain: rupipia.jp
*   Origins:
    *   S3 bucket (static frontend files)
    *   API Gateway (backend serverless functions)
*   Cache behaviors:
    *   Default: S3 bucket (static files)
    *   Path pattern `/api/*`: API Gateway (backend APIs)

**Lambda Function:**
*   Function name: rurupia-api
*   Runtime: Node.js 20.x
*   Region: ap-northeast-1
*   Handler: index.handler
*   IAM Role: rurupia-lambda-role
*   Environment variables:
    *   SUPABASE_URL: Supabase project URL
    *   SUPABASE_SERVICE_ROLE_KEY: Supabase service role key (for server operations)
    *   SUPABASE_ANON_KEY: Supabase anonymous key (for client operations)
    *   VITE_TINYMCE_API_KEY: TinyMCE editor API key
    *   VITE_APP_LINE_CLIENT_ID: LINE OAuth client ID
    *   VITE_APP_LINE_CLIENT_SECRET: LINE OAuth client secret

**API Gateway:**
*   API ID: pq33gk4qqd
*   Name: rurupia-api
*   Endpoint: https://pq33gk4qqd.execute-api.ap-northeast-1.amazonaws.com/prod
*   Resources:
    *   Proxy resource {proxy+} with ANY method
    *   OPTIONS method with CORS configuration

**API Endpoints:**
*   `/api/config`: Returns environment variables for the frontend
*   `/api/post-likes`: Manages post likes (POST/DELETE)
*   `/api/user-likes`: Retrieves user likes
*   `/api/post-comments`: Manages post comments