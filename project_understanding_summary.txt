## Project: Therapist Connectivity

**Core Idea:** A web application to connect clients with therapists, manage therapy-related services, and provide a platform for therapist-client interaction.

**Key Features & Functionality:**
*   **User Roles:** Client, Therapist, Store Admin, System Admin.
*   **Client Features:**
    *   Browse and filter therapists.
    *   View detailed therapist profiles.
    *   Questionnaire-based therapist matching (including MBTI personality types).
    *   Book appointments.
    *   Manage personal bookings.
    *   Messaging system.
    *   Login via email/password, LINE, and Google.
*   **Therapist Features:**
    *   Self-registration via invitation link.
    *   Comprehensive profile management (specializations, questionnaire, MBTI, posts).
    *   Manage availability and bookings.
    *   Messaging system with clients.
    *   Create blog-like posts viewable by clients.
*   **Store Admin Features:**
    *   Manage therapists associated with their store (approval process).
    *   Oversee bookings.
    *   Manage courses.
    *   Contribute to/manage blog content.
    *   View analytics for their store.
    *   Handle inquiries.
*   **System Admin Features:**
    *   User account management (all types).
    *   Overall blog content management.
    *   System settings and configuration.
    *   View platform-wide analytics (e.g., page views).
    *   Handle system-level inquiries and requests.
*   **Content & Interaction:**
    *   Blog system with Rich Text Editor (TinyMCE).
    *   Therapist posts (distinct from blog).
    *   Social features: Therapist reviews (clients can review after a completed session), Post liking, Post commenting.
*   **Database & Backend Logic:**
    *   Extensive use of Supabase PostgreSQL.
    *   Numerous tables including: `profiles`, `therapists`, `bookings`, `blog_posts`, `therapist_posts`, `messages`, `therapist_reviews`, `post_likes`, `post_comments`, `page_views`, `store_therapist_relations`, etc.
    *   Heavy reliance on Row Level Security (RLS) policies for granular data access control based on user roles and relationships.
    *   PostgreSQL functions and triggers for automating tasks (e.g., calculating average ratings, updating like/comment counts, handling new user profile creation).
*   **AI/Agent Aspect (Development Tooling):**
    *   `memory.json`: A structured knowledge base capturing project architecture, tech stack, features, and user information. Seems to be for an AI assistant guiding development.
    *   `lessons.json`: Tracks common errors, their patterns, solutions, and verification steps, likely for the same AI assistant.

**Technical Setup:**
*   **Frontend:**
    *   Framework/Library: React (v18) with Vite as the build tool.
    *   Language: TypeScript.
    *   Routing: `react-router-dom`.
    *   State Management: Primarily TanStack Query (React Query) for server state; local component state and React Context API (e.g., `AdminAuthContext`).
    *   Forms: `react-hook-form` with Zod for validation.
    *   UI: Tailwind CSS, Shadcn UI (extensive use of its components), custom components.
    *   Styling: `index.css`, `App.css` for global styles, Tailwind utility classes.
*   **Backend & Database:**
    *   Provider: Supabase (PaaS).
    *   Services Used: Supabase Auth (including OAuth for LINE, Google), Supabase Database (PostgreSQL), Supabase Storage (for blog images, verification documents).
    *   Database Migrations: Managed via Supabase CLI (migration files in `supabase/migrations/`). Numerous other ad-hoc SQL scripts are present in various locations (`/`, `api/`, `supabase/`, `migrations/` at root).
*   **API Interaction:**
    *   Primarily client-side interaction with Supabase services (Database, Auth, Storage) using the `supabase-js` client library.
    *   Data logic, authorization, and complex operations are handled by Supabase RLS policies, database functions (PL/pgSQL), and triggers.
*   **Deployment:**
    *   Platform: Configured for Vercel (`vercel.json`).
    *   Strategy: Deployed as a Single Page Application (SPA). `vercel.json` specifies `framework: "vite"` and rewrites all requests to `index.html`.
    *   Build: `npm run build` outputting to `dist/` directory.
*   **Development & Tooling:**
    *   Package Manager: npm (indicated by `package-lock.json`, though `bun.lockb` also exists).
    *   Linting: ESLint with TypeScript support.
    *   Component Tagger: `lovable-tagger` (used in development mode via Vite config).
    *   Supabase Client: Initialized in `src/integrations/supabase/client.ts` with hardcoded URL/anon key and `localStorage` for session persistence.
    *   Supabase Admin Client: A separate client initialized in `src/integrations/supabase/admin-client.ts` using a hardcoded Service Role Key. This is intended for admin operations but poses a **critical security risk if ever imported and used in client-side code.**
    *   Auth State Management: 
        *   Uses a combination of Supabase auth session and custom localStorage caching for user types.
        *   The app determines user types by checking multiple tables (`stores`, `therapists`, `profiles`) and caches the result in localStorage under the key 'nokutoru_user_type'.
        *   UI rendering logic checks both user session and userType before showing logged-in UI elements to prevent inconsistencies.
        *   Enhanced logout functionality includes proper state and localStorage clearing with fallback mechanisms.
        *   Stale state detection clears localStorage when user session doesn't exist.
        *   Added admin client fallback for retrieving user profiles when normal queries fail.
    *   Auth Debugging: 
        *   Custom utilities in `src/utils/auth-debug.ts` provide browser console tools for diagnosing and fixing auth state issues.
        *   Available tools include `checkState()`, `clearAll()`, `forceSignOut()`, and `fixState()` to assist developers.
        *   These utilities are exposed in the browser console in `main.tsx` via the `window.authDebug` object.
    *   Storage Setup: Client-side script (`src/supabase/storage-setup.ts`) attempts to ensure the 'blog' bucket exists, run by administrators during initial setup.
    *   User Interface Navigation:
        *   Breadcrumbs for navigating between hierarchical pages (user profile → messages, bookings, etc.)
        *   Loading indicators for UI state transitions (login, logout, navigation, profile saving)
        *   Consistent back-navigation from child pages to parent pages
        *   Fixed links to followed therapists page (using dedicated page instead of filtered view)
    *   Notification System:
        *   Database tables (notification_settings, notifications) to store user preferences and notification history
        *   Typed notification service helpers for different notification types (messages, bookings, promotions, reviews)
        *   User notification settings page with toggles for different notification types
        *   Integration with messaging and other features to send appropriate notifications

**Key Files & Directories:**
*   `src/`: Main application source code.
    *   `main.tsx`: App entry point.
    *   `App.tsx`: Root component with routing setup.
    *   `pages/`: Route components.
    *   `components/`: Reusable UI components (including Shadcn UI).
    *   `integrations/supabase/client.ts`: Supabase client setup.
    *   `contexts/`, `hooks/`, `utils/`, `types/`.
*   `supabase/`: Supabase CLI related files.
    *   `migrations/`: Official database migration scripts.
    *   `config.toml`: Supabase project ID.
    *   Numerous other SQL scripts and READMEs for specific features/fixes.
*   `public/`: Static assets.
*   SQL Scripts: Many `.sql` files across the project for initial setup, fixes, feature additions (e.g., `supabase-setup.sql`, `api/database-setup.sql`, `add-questionnaire-columns.sql`).
*   Configuration: `vite.config.ts`, `tailwind.config.ts`, `tsconfig.json`, `package.json`, `vercel.json`, `eslint.config.js`.
*   Documentation: Various `README.md` files explaining setup for Supabase, LINE login, questionnaire, therapist signup, etc.
*   AI/Agent Files: `memory.json`, `lessons.json`.

**Recent UI Improvements:**
* Added breadcrumbs navigation to all key user pages (user-bookings, messages, messages-index, followed-therapists)
* Fixed link to followed therapists in user profile sidebar (now using dedicated page)
* Fixed multiline input for 趣味 (hobbies) field in user profile
* Removed verification request button from mypage (feature under maintenance)
* Removed the プロフィール編集 (Profile Edit) button from the left profile card
* Added loading indicators for UI state transitions (login, logout, profile saving)
* Enhanced session management to prevent UI flickering during auth state changes
* Improved the mobile layout with consistent container styling

**Recent Updates:**
- Fixed 400 Bad Request errors in analytics by updating PostgreSQL RPC functions with consistent parameter naming (input_store_id)
- Fixed TypeScript errors in StoreAnalytics.tsx by adding proper module declarations for Supabase RPC functions
- Improved error handling in analytics data fetching with better error logging and type safety checks
- Created PostgreSQL functions (get_customer_age_distribution, get_monthly_customer_data, get_popular_booking_times, get_therapist_performance) to generate analytics data on-the-fly, solving the 403 Forbidden error in StoreAnalytics
- Updated StoreAnalytics.tsx to use RPC function calls instead of direct table queries, falling back to mock data when needed
- Fixed monthly sales calculation in the StoreAdminDashboard to correctly count revenue from completed bookings
- Fixed the booking status detection to properly handle both "完了" (completed) status and the combination of store and therapist statuses
- Updated all booking date references to use booking.date instead of booking.booking_date to match the database schema
- Fixed the save functionality in TherapistSettings page for all tabs (account, privacy, notifications, security)
- Added proper TypeScript type definitions for therapist settings columns in the database
- Fixed therapist record creation with required fields (name, description, location) when settings are first saved
- Improved error handling with specific error messages for each settings operation
- Fixed the data fetching issues in therapist settings by adding proper type assertions
- Added local state updates after each successful settings change to update the UI immediately
- Fixed password change functionality by adding current password verification
- Fixed the calendar UI in therapist detail page to properly display availability
- Enhanced availability checking logic for therapists to provide more accurate results
- Fixed error message "このセラピストは現在予約を受け付けていません" to only show when a therapist truly has no availability
- Added more robust availability detection that checks for valid future dates, working hours, and availability data
- Improved the visual indication of unavailable therapists with red text alerts
- Fixed availability date checking by properly handling both date strings and day names
- Added a new hasAnyAvailability state in AvailabilityCalendar to prevent false error messages
- Fixed the working day matching logic to properly check for specific dates rather than just day names
- Fixed the availability calendar in therapist detail and booking pages to strictly use real therapist working days/hours from the database without fallback mock data
- Added clear messaging when a therapist has no availability instead of showing mock calendar data
- Added fuzzy search functionality to the Index page search field, showing real-time suggestions as users type
- Integrated all 47 Japanese prefectures in the area dropdown using the PrefectureSelect component
- Enhanced notification system with proper error handling and user feedback
- Fixed various UI consistency issues including React Fragment handling
- Removed Lovable-related components and references
- Added toast notifications for user actions across the application
- Fixed booking submission issues by correcting database field names and adapting to schema constraints
- Implemented comprehensive booking notification system for therapists, stores, and users
- Fixed messaging system by properly maintaining session context and improving error handling
- Created new therapist messaging interface with improved UX and notification support
- Added support for image attachments in messages with proper error handling and feedback
- Improved the hobbies input field in UserProfile to match the TherapistProfileForm using a badge-based interface
- Added account deletion functionality to the TherapistSettings page
- Removed the language setting dropdown from the TherapistSettings page
- Added security settings to allow therapists to change their passwords
- Added privacy settings to TherapistSettings to control profile visibility and messaging restrictions
- Extended the therapists table with columns for privacy and notification settings
- Fixed the issue with database settings not being reflected correctly in the UI
- Fixed several type errors in the settings form by adding proper typings

**Discrepancies & Potential Issues:**
*   **Documentation Mismatch:** `README.md` tech stack mentions Next.js, but the project is Vite-based.
*   **Hardcoded Keys:** Supabase URL and anon key are hardcoded in `src/integrations/supabase/client.ts`. The Service Role Key is hardcoded in `src/integrations/supabase/admin-client.ts` (critical security risk if used client-side).
*   **Scattered SQL Scripts:** SQL logic is spread across CLI migrations and many other ad-hoc files.
*   **Risky SQL in `fixes.sql`:** Contains a command to unconditionally grant admin rights to the current user.
*   **Legacy API Code:** `api/post-api-routes.js` contains Next.js-style API route handlers that are not used by the Vite setup or Vercel SPA deployment.
*   **Dual Lockfiles:** `package-lock.json` (npm) and `bun.lockb` (Bun) coexist.
*   **Security of Generated Supabase Client:** The client file `src/integrations/supabase/client.ts` is marked as "automatically generated". If it's regenerated, manual changes (like moving keys to env vars) might be overwritten. The `admin-client.ts` also contains a hardcoded service role key.
*   **Auth State Limitations:** Still using localStorage for userType caching instead of a centralized auth context. Multiple client warning occurs when admin pages import both regular and admin client instances.

**Overall Architecture:**
The application follows a modern SPA architecture with React on the frontend and Supabase providing the BaaS (Backend as a Service). The frontend is responsible for UI rendering and user interaction, while Supabase handles data storage, querying, real-time capabilities (if used, not explicitly detailed but possible with Supabase), authentication, and file storage. Security is enforced primarily through Supabase's RLS policies and database-level logic.
The project is quite extensive with many features and user roles, indicating a complex application. The presence of AI-related helper files (`memory.json`, `lessons.json`) is a unique aspect, suggesting advanced development tooling or an integrated AI assistant.

## Recent Updates & Improvements

### User Interface Enhancements
- Added breadcrumbs navigation to UserBookings, Messages, MessagesIndex, and FollowedTherapists pages
- Fixed the link to フォロー中のセラピスト (Followed Therapists) to use correct path
- Added loading indicators for UI state transitions (login, logout, profile saving)
- Fixed the textarea input for the 趣味 (hobbies) field in UserProfile to properly handle Enter key
- Removed verification request button from mypage as it's currently under maintenance
- Removed the プロフィール編集 (Profile Edit) button from the left profile card since the user profile page itself serves that purpose

### Email Notification System
- Implemented a comprehensive email notification system with user-configurable preferences
- Created notification_settings table to store user preferences for different notification types
- Created notifications table to track all notifications sent to users
- Added a notification settings page with toggles for different notification types:
  - Email notifications (overall toggle)
  - Message notifications
  - Booking notifications
  - Promotion notifications
  - Review notifications
- Implemented notification service with type-specific helper functions for sending notifications
- Created UserNotifications.tsx page for viewing notifications
- Updated NotificationSettings.tsx to toggle different notification types
- Added the notification route to App.tsx
- Integrated notifications with the Messages feature

### Authentication System Fixes
- Enhanced Layout.tsx to correctly handle auth state and display proper UI
- Fixed auth state UI inconsistencies where UI showed "mypage" header when auth state was false
- Improved logout functionality with better error handling and fallback mechanisms
- Added state indicators for auth operations (logging in, logging out)
- Fixed persistent login issues by removing auth timeout
- Added admin client fallback for retrieving user profiles when normal queries fail
- Added auth debugging utilities in auth-debug.ts for state checking and recovery 

### Analytics System Improvements
- Fixed 403 Forbidden errors in StoreAnalytics.tsx by creating PostgreSQL functions with SECURITY DEFINER to bypass Row Level Security
- Created four functions to generate analytics data on-the-fly:
  - get_customer_age_distribution
  - get_monthly_customer_data
  - get_popular_booking_times
  - get_therapist_performance
- Fixed 400 Bad Request errors by resolving ambiguous column references in SQL queries
- Added explicit type casts (::INTEGER) to fix "structure of query does not match function result type" errors
- Created TypeScript interface declarations to resolve type errors
- Implemented better error handling with console logging for analytics data fetching

### Booking and Sales Data Fixes
- Fixed the "今月の売上" (monthly sales) calculation:
  - Enhanced the logic to properly count revenue from bookings with completed status
  - Added better status detection to include all variations of "完了" (completed) status
  - Fixed status checking to handle both combined status and individual status fields
- Enhanced the "曜日別予約数" (day-of-week bookings) graph:
  - Modified the data retrieval to always include bookings from the past 7 days
  - Changed the chart from showing daily data to showing aggregated day-of-week data
  - Created a complete day-of-week representation with all days initialized
  - Added proper sorting of days (Monday through Sunday) 

### Google OAuth Configuration
- Configured Google OAuth to use the redirect URI: https://rupipia.jp/auth/callback. 

The project is a web application, likely a platform for therapists and clients to connect. It uses Supabase for its backend, including authentication and database storage. The frontend is built with React and TypeScript.

Key features implemented or in progress:
- User roles: admin, therapist, client, store.
- Authentication: Email/password, Google OAuth (configured with specific redirect URI: https://rupipia.jp/auth/callback), LINE login (manual OAuth flow via client-side and planned Edge Function for Supabase integration).
- Profile management.
- Content management (blog with TinyMCE).
- Page view analytics (admin only).

Recent changes:
- Configured Google OAuth redirect URI.
- Initiated LINE login setup:
    - Client ID and Redirect URI environment variables configured for login/signup pages.
    - LineCallback.tsx updated to use environment variables and to call a Supabase Edge Function ('line-auth-handler') for processing the LINE callback and integrating with Supabase user management.
    - Database migration for 'line_id' in 'profiles' table identified.
    - Conceptual Supabase Edge Function 'line-auth-handler' outlined for LINE ID token verification, Supabase user creation/linking, and session management (session token generation part is complex and needs further refinement).

This summary reflects the current understanding of the project based on the interactions and file analysis.

### AWS Deployment (Frontend Only) - As of 2024-10-22
- **Strategy**: Static frontend hosting on AWS, Supabase remains the backend.
- **Services Used**:
    - **AWS S3**: Stores the static built assets of the React application (output of `npm run build`).
        - Bucket Name: `therapist-connectivity-frontend-93b9faa0` (in `ap-northeast-1` - Tokyo).
        - Bucket is private.
    - **AWS CloudFront**: CDN to serve the S3 content, provide HTTPS, and improve performance.
        - Distribution ID: `E2P3Q41GY0N3CJ`
        - Domain Name: `dqv3ckdbgwb1i.cloudfront.net`
        - Configured with Origin Access Control (OAC ID: `E3CJMWQPFVBULW`) to securely access the private S3 bucket.
    - **AWS Certificate Manager**: SSL certificate for custom domain (rupipia.jp)
        - Certificate ARN: `arn:aws:acm:us-east-1:536697269239:certificate/a7a75270-922d-4506-921e-d37143a91ff1`
        - DNS Validation Record: `_9a689ffbd47df0f833e3dcb0d742c029.rupipia.jp` → `_ca8dbb7f5b87f13819f0f5bcd230052e.xlfgrmvvlj.acm-validations.aws`
    - **AWS CLI**: Used for creating and configuring S3, OAC, and CloudFront.
- **Deployment Steps Performed**:
    1.  Built the React application (`npm run build`).
    2.  Created an S3 bucket in `ap-northeast-1`.
    3.  Configured S3 bucket's public access block settings to allow a CloudFront-specific policy.
    4.  Uploaded built assets from `dist/` to the S3 bucket.
    5.  Created a CloudFront Origin Access Control (OAC).
    6.  Created a CloudFront distribution pointing to the S3 bucket origin, using the OAC.
    7.  Updated the S3 bucket policy to grant `s3:GetObject` permission only to the CloudFront distribution via the OAC and AWS Source ARN.
- **Frontend URL**: `http://dqv3ckdbgwb1i.cloudfront.net` (redirects to HTTPS).
- **Backend**: Continues to be the existing Supabase project. Frontend makes API calls to Supabase.
- **Region**: All AWS resources deployed in `ap-northeast-1` (Tokyo). 